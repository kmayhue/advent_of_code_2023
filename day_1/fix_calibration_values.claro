
var input_file = resources::inputFile;
var input_text = files::readOrPanic(input_file);
var input_text_lines = strings::split(input_text, "\n");

function get_first_number(input_line: string) -> oneof<int, std::Error<string>> {

    for (elmt in strings::splitChars(input_line)) {
        
        var char_int = ints::parseInt(elmt);
        if (char_int instanceof int) {
            return char_int;
        }
    }
    return std::Error("There were no integers in this line");


}

function get_last_number(input_line: string) -> oneof<int, std::Error<string>> {

    var index = len(input_line) - 1;
    while (index >= 0) {
        
        var char_int = ints::parseInt(input_line[index]);
        if (char_int instanceof int) {
            return char_int;
        }
        index --;
    }
    return std::Error("There were no integers in this line");

}

function get_calibration_sum(input_text_lines: [string]) -> int {
    var calibration_sum = 0;
    for (line in input_text_lines) {

        var first_number = get_first_number(line);
        var last_number = get_last_number(line);

        if ((first_number instanceof int) and (last_number instanceof int)) {
            calibration_sum = calibration_sum + (10 * first_number) + last_number;
        }
    }
    return calibration_sum;
}

#function pre_process_string(input_text: string) -> string {
#
#    for 
#
#}

var STRING_TO_NUMBER: {string: string} =  {
    "one": "1",
    "two": "2",
    "three": "3",
    "four": "4",
    "five": "5",
    "six": "6",
    "seven": "7",
    "eight": "8",
    "nine": "9"
};

print(STRING_TO_NUMBER["one"]);
print(get_calibration_sum(input_text_lines));

for (key in maps::keySet(STRING_TO_NUMBER)) {

    print(key);

}

print(strings::replaceAll("one3one", "one", STRING_TO_NUMBER["one"]));






